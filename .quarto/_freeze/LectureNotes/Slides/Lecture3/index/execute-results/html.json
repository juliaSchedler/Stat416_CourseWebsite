{
  "hash": "4790f8d6841d9c3ffe67fdd6ea5df19c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 3\"\nauthor: \"Julia Schedler\"\nformat: \n  revealjs:\n    slide-number: true\n    scrollable: true\nfilters: \n  - timer\n---\n\n\n## Recap\n\n::: hidden\n$$\n\\newcommand\\E{{\\mathbb{E}}}\n$$\n:::\n\n-   Visualizing time series\n-   Research questions involving time series\n-   Mean and covariance functions\n-   Moving average examples\n-   Almost got to stationarity\n\n## Today\n\n-   Decomposing a time series\n\n-   Stationarity\n\n-   Autocorrelation function\n\n-   Time series regression\n\n## First \"participation\" grade\n\n-   confirm you are good to opt in or out of the textbook, you have to do it by Oct 2 so do it on Oct 1 (tomorrow).\n\n## Lecture Template\n\n-   Download \"Lecture3Template.qmd\" from Canvas\n-   has some basic document structure set up to make it easier to follow along in lecture :)\n\n## Another time series model\n\nSimilar to the signal plus noise model,\n\n$$\nX_t = T_t + S_t + W_t\n$$\n\n-   $T_t$ is the trend component\n-   $S_t$ is the seasonal component\n-   $W_t$ is the error component\n\nThe `r` function `stats::decompose` will split a time series $X_t$ into these three components.\n\n## Activity 1 {.smaller}\n\n::: columns\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(astsa)\n\n## use the decompose function on the jj series\njj_decomp <- ## your code here\n  \n## plot the decomposition\n## your code here\n```\n:::\n\n\n1.  Use the `decompose` function on the `jj` series.\n\n2.  Match the terms in the equation on the previous slide to each of the components in the chart\n\n3.  Describe the trend.\n\n4.  Does the bottom plot (\"error\") look like white noise?\n\n5.  Look at the documentation for the `decompose` function. Can you determine how the \"trend\" component was computed?\n:::\n\n::: {.column width=\"10%\"}\n::: {#DecomposeJJ .timer seconds=\"300\" starton=\"interaction\"}\n:::\n:::\n:::\n\n## Activity 1 (solution)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(astsa)\n\n## use the decompose function on the jj series\njj_decomp <- decompose(jj)\n\n## plot the decomposition\nplot(jj_decomp)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/activity-1-solution-1.png){width=960}\n:::\n:::\n\n\n## Activity 2 {.smaller}\n\n::: columns\n::: column\nRecall the (sinusoidal) signal plus noise model: $$\nw_t \\sim \\text{iid } N(0, \\sigma^2_w)\\\\\nx_t = 2\\cos\\left (\\frac{2\\pi t}{50} - .6\\right) + w_t\n$$\n\n::: {#SimulateDecomp .timer seconds=\"300\" starton=\"interaction\"}\n:::\n:::\n\n::: column\n1.  Simulate 500 observations from the signal plus noise model\n2.  Apply the `decompose` function. Does the error portion look like white noise?\n\nHint: The below code gives an error. Compare the \"frequency\" of the `jj` series. Can you figure out how to use the `ts` function to specify the correct frequency?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\ncs = 2*cos(2*pi*(1:500)/50 + .6*pi)\nw  = rnorm(500,0,1)\nx_t = cs + w\n\nplot(decompose(x_t))\n```\n:::\n\n:::\n:::\n\n## Activity 2 (solution)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nset.seed(2024)\ncs = 2*cos(2*pi*(1:500)/50 + .6*pi)\nw  = rnorm(500,0,1)\nx_t = ts(cs + w, frequency = 50)\n\nplot(decompose(x_t))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n## [Comparing \"math perspective\" to \"data perspective\"]{.r-fit-text}\n\n::: columns\n::: column\n$$\nw_t \\sim N(0, \\sigma^2_w), t = 1, \\dots, n\\\\\nx_t = 2\\cos\\left (\\frac{2\\pi t}{50} - .6\\right) + w_t\n$$\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n:::\n\n::: column\n\n::: {.cell}\n\n```{.r .cell-code}\ncs = 2*cos(2*pi*(1:500)/50 + .6*pi)\nw  = rnorm(500,0,1)\nx_t = ts(cs + w, frequency = 50)\n\nplot(decompose(x_t))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/decompose-1.png){width=960}\n:::\n:::\n\n\nDoes this function give us an estimate of the *form* of the mean function?\n:::\n:::\n\n# Motivating Stationarity\n\n## Review: autocovariance function\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/show-error-dists-1.png){width=960}\n:::\n:::\n\n\n## [Error covariance at different time points]{.r-fit-text}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/errors-regression-1.png){width=960}\n:::\n:::\n\n\n## [Error Covariance at Different Time Points (time dependence)]{.r-fit-text}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/time_series_autocov-1.png){width=960}\n:::\n:::\n\n\n## Stationarity\n\nA time series is **stationary** if\n\n-   the mean function ($\\mu_t$) is constant and does not depend on time $t$\n-   the autocovariance function ($\\gamma(s,t)$) depends on $s$ and $t$ only though their difference\n\nAnd **nonstationary** otherwise.\n\n## [Steps to determine whether a time series $x_t$ is stationary:]{.r-fit-text}\n\n1.  Compute the mean function.\n2.  Compute the autocovariance function.\n3.  If both do not depend on $t$, then $x_t$ is stationary. If $\\gamma$ depends on $s$ and $t$ just through the value $s-t$, then $x_t$ is stationary. Otherwise, $x_t$ is nonstationary.\n\n## [Activity 3: Example 2.14 Stationarity of a Random Walk]{.r-fit-text}\n\n$$\nx_t = x_{t-1} + w_t\n$$\n\nLast, time, we saw that the mean function is $\\E(x_t) = 0$, and the autocovariance function is $\\gamma_x(s, t) = \\min\\{s,t\\}\\sigma^2_w$\n\n::: columns\n::: {.column width=\"60%\"}\n1.  **Is** $x_t$ stationary?\n2.  **What if there was drift?**\n:::\n\n::: {.column width=\"10%\"}\n::: {#Stationary .timer seconds=\"180\" starton=\"interaction\"}\n:::\n:::\n:::\n\n## [Activity 3 Solution (Example 2.14 Stationarity of a Random Walk)]{.r-fit-text} {.smaller}\n\n1.  **Is** $x_t$ stationary?\n\nNo, the autcovariance function depends on $t$ (there's a $t$ in the equation): $$\n\\gamma_x(s, t) = \\min\\{s,t\\}\\sigma^2_w\n$$\n\nMore concretely: consider if we want to know the correlation between the random walk at times $s = 2, t = 5$, $$\n\\gamma(2,5) = \\min\\{2,5\\}\\sigma^2_w = 2\\sigma^2_w\n$$ But $\\gamma(3,5) = 3\\sigma^2_w$. So the autocovariance is different depending on which points in time you are considering.\n\n2.  **What if there was drift?**\n\nAgain, no. The mean function of the random walk with drift is $\\mu_t = \\delta t$, which depends on $t$.\n\n## $\\gamma(s,t)$ for a random walk\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-e01854019546370b8051\" style=\"width:960px;height:480px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-e01854019546370b8051\">{\"x\":{\"visdat\":{\"1259155a287d6\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1259155a287d6\",\"attrs\":{\"1259155a287d6\":{\"x\":{},\"y\":{},\"z\":{},\"mode\":\"markers\",\"size\":0.10000000000000001,\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter3d\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"xaxis\":{\"title\":\"s\"},\"yaxis\":{\"title\":\"t\"},\"zaxis\":{\"title\":\"gamma\"}},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\"y\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20],\"z\":[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,5,10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,5,10,15,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,5,10,15,20,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,5,10,15,20,25,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,5,10,15,20,25,30,35,35,35,35,35,35,35,35,35,35,35,35,35,35,5,10,15,20,25,30,35,40,40,40,40,40,40,40,40,40,40,40,40,40,5,10,15,20,25,30,35,40,45,45,45,45,45,45,45,45,45,45,45,45,5,10,15,20,25,30,35,40,45,50,50,50,50,50,50,50,50,50,50,50,5,10,15,20,25,30,35,40,45,50,55,55,55,55,55,55,55,55,55,55,5,10,15,20,25,30,35,40,45,50,55,60,60,60,60,60,60,60,60,60,5,10,15,20,25,30,35,40,45,50,55,60,65,65,65,65,65,65,65,65,5,10,15,20,25,30,35,40,45,50,55,60,65,70,70,70,70,70,70,70,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,75,75,75,75,75,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,80,80,80,80,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,85,85,85,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,90,90,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,95,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100],\"mode\":\"markers\",\"type\":\"scatter3d\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"sizesizemode\":\"area\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"textfont\":{\"size\":55},\"error_y\":{\"color\":\"rgba(31,119,180,1)\",\"width\":55},\"error_x\":{\"color\":\"rgba(31,119,180,1)\",\"width\":55},\"line\":{\"color\":\"rgba(31,119,180,1)\",\"width\":55},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n## Is white noise stationary?\n\n-   Mean function of white noise is $\\E(w_t) = 0$\n-   Autocovariance function is $$\n    \\gamma_w(s, t) = cov(w_s, w_t) =  \\begin{cases} \\sigma^2_w & \\text{ if } s = t\\\\ 0 & \\text{ if } s \\ne t \\end{cases}\n    $$ Since neither depends on $t$, white noise is stationary.\n\n## $\\gamma(s,t)$ for white noise\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-4cb184a7d7be522053e8\" style=\"width:960px;height:480px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-4cb184a7d7be522053e8\">{\"x\":{\"visdat\":{\"1259164b7b448\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1259164b7b448\",\"attrs\":{\"1259164b7b448\":{\"x\":{},\"y\":{},\"z\":{},\"mode\":\"markers\",\"size\":0.10000000000000001,\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter3d\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"xaxis\":{\"title\":\"s\"},\"yaxis\":{\"title\":\"t\"},\"zaxis\":{\"title\":\"gamma\"}},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\"y\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20],\"z\":[5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5],\"mode\":\"markers\",\"type\":\"scatter3d\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"sizesizemode\":\"area\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"textfont\":{\"size\":55},\"error_y\":{\"color\":\"rgba(31,119,180,1)\",\"width\":55},\"error_x\":{\"color\":\"rgba(31,119,180,1)\",\"width\":55},\"line\":{\"color\":\"rgba(31,119,180,1)\",\"width\":55},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n## Break\n\n::: {#Break .timer seconds=\"360\" starton=\"interaction\"}\n:::\n\n## Activity 4\n\nWhich of the following time series are stationary?\n\n::: columns\n::: {.column width=\"60%\"}\n![From Forecasting Principles and Practice Chapter 9](https://otexts.com/fpp3/fpp_files/figure-html/stationary-1.png)\n:::\n\n::: {.column width=\"20%\"}\n::: {#VisualStationary .timer seconds=\"300\" starton=\"interaction\"}\n:::\n:::\n:::\n\n## Activity 4 (solution)\n\n-   (a), (c), (e), (f) (i) are clearly non-stationary in the mean.\n-   (d), (h) have seasonal patterns\n-   \\(i\\) has increasing variance\n-   \\(b\\) and (g) are stationary\n\n## Why is stationarity important?\n\n-   In order to measure correlation between contiguous time points\n-   To avoid spurious correlations in a regression setting\n-   Simplifies how we can write the autocovariance and autocorrelation functions\n\n## Autocorrelation function\n\nThe autocorrelation function (acf) of a time series is: $$\n\\rho(s, t) = \\frac{\\gamma(s,t)}{\\sqrt{\\gamma(s,s)\\gamma(t,t)}}\n$$ i.e. the autocovariance divided by the standard deviation of the process at each time point.\n\n## [Autocovariance and Autocorrelation for Stationary Time series]{.r-fit-text} {.smaller}\n\nSince for stationary time series the autocovariance depends on $s$ and $t$ only through their difference, we can write the covariance as: $$\n\\gamma(s,t) = \\gamma(h) = cov(x_{t+h}, x_t) = \\E[(x_{t+h} - \\mu)(x_t-\\mu)]\n$$ and the correlation as: $$\n\\rho(s,t) = \\rho(h) = \\frac{\\gamma(h)}{\\gamma(0)}\n$$ $h = s-t$ is called the **lag**.\n\n## [Autocorrelation function of a three-point moving average]{.r-fit-text} {.smaller}\n\n$\\gamma_v(s, t) = cov(v_s, v_t) =  \\begin{cases}\\frac{3}{9}\\sigma^2_w & \\text{ if } s = t\\\\ \\frac{2}{9}\\sigma^2_w & \\text{ if } \\vert s-t \\vert = 1 \\\\\\frac{1}{9}\\sigma^2_w & \\text{ if } \\vert s-t \\vert =2 \\\\0 & \\text{ if } \\vert s - t\\vert > 2\\end{cases}$\n\n::: columns\n::: column\nSince $v$ is stationary, we can write\n\n$\\gamma_v(h) = \\begin{cases}\\frac{3}{9}\\sigma^2_w & \\text{ if } h = 0\\\\ \\frac{2}{9}\\sigma^2_w & \\text{ if } h = \\pm1 \\\\\\frac{1}{9}\\sigma^2_w & \\text{ if }h = \\pm 2 \\\\0 & \\text{ if } h> 2\\end{cases}$\n:::\n\n::: column\nAnd the autocorrelation is:\n\n$\\rho(h) = \\begin{cases}1 & \\text{ if } h = 0\\\\ \\frac{2}{3} & \\text{ if } h = \\pm1 \\\\\\frac{1}{3} & \\text{ if }h = \\pm 2 \\\\0 & \\text{ if } h> 2\\end{cases}$\n:::\n:::\n\n## [Autocorrelation function of a three-point moving average]{.r-fit-text}\n\nIn R, we can plot $\\rho(h)$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nACF = c(0,0,0,1,2,3,2,1,0,0,0)/3\nLAG = -5:5\ntsplot(LAG, ACF, type=\"h\", lwd=3, xlab=\"LAG\")   \nabline(h=0)\npoints(LAG[-(4:8)], ACF[-(4:8)], pch=20)\naxis(1, at=seq(-5, 5, by=2))  \n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n## Activity 5 {.smaller}\n\n1.  Predict what the acf will look like for the ar(1) process?\n2.  Simulate an ar(1) process and compute the acf. Were you correct?\n3.  What is the lag 0 autocorrelation? Explain why its value makes sense.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# simulate from an ar(1)\n\n# use acf() function to plot acf\n\n# save output of acf and inspect\n```\n:::\n\n\n::: {#activity4 .timer seconds=\"300\" starton=\"interaction\"}\n:::\n\n## Activity 5 (solution)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# simulate from an ar(1)\nw <- rnorm(500)\nar_1 <- stats::filter(w, filter = 0.8, method = \"recursive\")\n# use acf() function\nacf(ar_1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n\n```{.r .cell-code}\n## what is the lag 1 correlation?\nacf_output <- acf(ar_1, plot = F)\nacf_output$acf[2] ## lag 1 autocorrelation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7846967\n```\n\n\n:::\n:::\n\n\n# Questions on the quiz?\n\n## Activity 6 (Problem 2.3) {.smaller}\n\nWhen smoothing time series data, it is sometimes advantageous to give decreasing amounts of weights to values farther away from the center. Consider the simple two-sided moving average smoother of the form: $$\nv_t = \\frac{1}{4}(w_{t-1} + 2w_t + w_{t+1})\n$$ Where $w_t$ are white noise. The autocovariance as a function of $h$ is: $$\\gamma_v(s, t) = cov(v_s, v_t) =  \\begin{cases}\\frac{6}{16}\\sigma^2_w & \\text{ if } h = 0\\\\ \\frac{4}{16}\\sigma^2_w & \\text{ if } h = \\pm 1 \\\\\\frac{1}{16}\\sigma^2_w & \\text{ if } h = \\pm 2 \\\\0 & \\text{ if } h> 2\\end{cases}$$ 1. Compare to the [autocovariance equation for the unweighted 3 point moving average from Lecture 2](https://juliaschedler.github.io/Stat416Fall24/LectureNotes/Lecture2.html#example-2.8-autocovariance-of-a-moving-average-1). Comment on the differences.\n\n2.  Write down the autocorrelation function.\n\n::: {#activity5 .timer seconds=\"300\" starton=\"interaction\"}\n:::\n\n## Activity 6 Solution\n\n1.  6/16 \\> 3/9, the \"present\" is weighted higher in the weighted average which impacts the covariance.\n2.  Divide each term by the variance ($\\gamma(0)$): $$\\rho_v(s, t) = cor(v_s, v_t) =  \\begin{cases}1 & \\text{ if } h = 0\\\\ \\frac{4}{6} & \\text{ if } h = \\pm 1 \\\\\\frac{1}{6} & \\text{ if } h = \\pm 2 \\\\0 & \\text{ if } h> 2\\end{cases}$$\n\n## Activity 7\n\nRecall the decomposition of the Johnson and Johnson quarterly earnings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(decompose(jj)) ## plot decomposition\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n1.  Is the series stationary?\n2.  Does the acf of the random component look like white noise?\n\n::: {#activity6 .timer seconds=\"300\" starton=\"interaction\"}\n:::\n\n## Activity 7 Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\njj_decomp <- decompose(jj)\n\npar(mfrow=2:1)\nacf(jj_decomp$random, na.action = na.pass) ## acf of random component\nacf(rnorm(length(jj))) ## acf of white noise of same length\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n## Coming up:\n\n-   Assignment 1 due at midnight\n-   Assignment 2 posted later\n-   Part of this will be involve \"reading\" the textbook! (collecting data on how you feel about the math)\n-   Next Lecture:\n    -   Regression with time\n    -   Cross-correlation\n    -   Inducing stationarity\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"../../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"../../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}