{
  "hash": "2166b915568ef5c09fed713393bb2826",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 4\"\nauthor: Julia Schedler\nformat: \n  html: \n    code-fold: show\nslide-number: true\nscrollable: true\nfilters: \n  - timer\n---\n\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n## Slides with Activity Solutions\n\n[View slides in full screen](Slides/Lecture4/){target=\"_blank\"}\n:::\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n## Link to Notes Template\n[Lecture4Template.qmd](ActivityTemplates/Lecture4Template.qmd)\n:::\n\n## Recap\n\n::: hidden\n$$\n\\newcommand\\E{{\\mathbb{E}}}\n$$\n:::\n\n-   Decomposing time series\n-   Stationarity (theoretically and with data)\n-   Some activities\n\n## Today\n\n-   Finish up activities from Lecture 3\n-   Trend stationarity\n-   Visualizing autocovariance (third attempt)\n-   Detrending\n-   \"Office hours\"\n\n## Reminders\n\n-   Syllabus participation policy\n-   Assignments: Going forward, must submit **rendered pdf** of code portion. (if you want to be nice to me, do this for Assignment 2, but starts with Assignment 3)\n-   Late quizzes: Going forward: Email me ahead of time, otherwise it's a 0\n-   Exam details: No use of computer, code will be covered but basic, notes sheet is allowed, practice test will be provided\n\n## [Activity 1: Export Price of Salmon (Example 3.1)]{.r-fit-text} {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(astsa)\n\nsummary(fit <- lm(salmon~time(salmon), na.action=NULL))\n## \n## Call:\n## lm(formula = salmon ~ time(salmon), na.action = NULL)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -1.69187 -0.62453 -0.07024  0.51561  2.34959 \n## \n## Coefficients:\n##                Estimate Std. Error t value Pr(>|t|)    \n## (Intercept)  -503.08947   34.44164  -14.61   <2e-16 ***\n## time(salmon)    0.25290    0.01713   14.76   <2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.8814 on 164 degrees of freedom\n## Multiple R-squared:  0.5706,\tAdjusted R-squared:  0.568 \n## F-statistic: 217.9 on 1 and 164 DF,  p-value: < 2.2e-16\ntsplot(salmon, col=4, ylab=\"USD per KG\", main=\"Salmon Export Price\")\nabline(fit)\n```\n\n::: {.cell-output-display}\n![](Lecture4_files/figure-html/activity-1-1.png){width=672}\n:::\n:::\n\n\n## [Activity 1: Export Price of Salmon (Example 3.1)]{.r-fit-text} {.smaller}\n\n1.  Does this time series appear stationary?\n\n2.  The (mathematical) equation in the book for the trend line above is:\n\n    $$\n    x_t = \\beta_0 + \\beta_1z_t + w_t, z_t = 2003\\frac{8}{12}, 2001\\frac{8}{12}, \\dots, 2017\\frac{5}{12}\n    $$\n\n    -   There is a typo in this equation. Correct the typo. (hint: examine to the first few entries of `time(salmon)`\n\n    -   Why are there fractions of the year? Explain what the fractional values mean and describe how they appear in the data set within R.\n\n3.  Interpret the estimate of the slope.\n\n## [Activity 2: Trend Stationarity (Example 2.19)]{.r-fit-text} {.smaller}\n\nConsider the time series model $$x_t = \\beta t + y_t$$ Assume $y_t$ is stationary with mean function $\\mu_y$ and and autocovariance function $\\gamma_y(h)$\n\n-   Compare this equation to the regression equation in the last example.\n-   What are the mean function and autocovariance function of $x_t$?\n\n## Trend stationarity model\n\nA time series which is nonstationary in the mean but is stationary in the autocovariance is sometimes called **Trend stationarity**.\n\n-   I'm actually not sure if it just refers to linear trends?? I'll ask people at my conference\n\n# Visualizing (possibly nonstationary) Autocorrelation functions\n\n## Visualizing the autocovariance for trend stationarity\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(ggplot2)\nset.seed(807)\nt <- seq(1, 10, 1)\nx_t <- 0.5*t \n#x <- x - mean(x)\n#y <- y - mean(y)\n\ndf <- data.frame(t, x_t)\n\n# For every row in `df`, compute a rotated normal density centered at `y` and shifted by `x`\ncurves <- lapply(seq_len(NROW(df)), function(i) {\n  mu <- df$x_t[i]\n  range <- mu + c(-1.5, 1.5)\n  seq <- seq(range[1], range[2], length.out = 100)\n  data.frame(\n    t = -1 * dnorm(seq, mean = mu, sd = 0.5) + df$t[i],\n    x_t = seq,\n    grp = i\n  )\n})\n# Combine above densities in one data.frame\ncurves <- do.call(rbind, curves)\n\nnew.x = seq(from = 1, to = 10, by = .1)\nnew.y = .5*new.x\ntrend_line <- data.frame(x = new.x,\n                       y = new.y)\nggplot(df, aes(t, x_t)) +\n  geom_point(col = \"blueviolet\", pch = 17) +\n  #geom_line() +\n  # The path draws the curve\n  geom_path(data = curves, aes(group = grp)) +\n  geom_line(data = trend_line, aes(x=x,y=y), col = \"blueviolet\") +\n  lims(y = c(-2,10)) +\n  scale_x_continuous(breaks = seq(1, 10, by = 1)) +\n  theme_minimal() + \n  theme( # remove the vertical grid lines\n           panel.grid = element_blank() ,\n           # explicitly set the horizontal lines (or they will disappear too)\n           panel.grid.major.x = element_line( size=.1, color=\"black\" )) +   \n  geom_rect(aes(xmin = 1.1, xmax = 2.1, ymin = -1, ymax = 3), fill = NA, col = \"blue\")+   \n  geom_rect(aes(xmin = 7.1, xmax = 8.1, ymin = 2, ymax = 6), fill = NA, col = \"magenta\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Lecture4_files/figure-html/show-error-dists-1.png){width=672}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n  # The polygon does the shading. We can use `oob_squish()` to set a range.\n  #geom_polygon(data = curves, aes(y = scales::oob_squish(y, c(0, Inf)),group = grp))\n```\n:::\n\n\n## [Simulate many time series from the trend stationarity model]{.r-fit-text} {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nset.seed(807)\nTime <- 10\nn_sim <- 100\nall_series = matrix(rep(NA, times = n_sim*Time), nrow = Time)\nfor(i in 1:n_sim){\n  cs = 0.25*1:Time        # same thing \n  w  = rnorm(Time + 50,0,1)\n  #w_dep = stats::filter(w, filter = rep(1/3,3))[2:(Time + 1)]\n  #all_series[,i] <- cs + w_dep\n  all_series[,i] <- cs + w[2:(Time+1)]\n  #names(all_series)[i] <- paste(\"sim_\", i)\n  \n}\nfit <- lm(all_series[,1]~time(all_series[,1]), na.action=NULL)\ntsplot(all_series[,1], main = \"One simulated Time series\", type = \"b\", col = c(\"black\", \"blue\", rep(\"black\", times = 5), \"magenta\", \"black\", \"black\"), pch = 16, cex = 3)\nabline(fit)\n```\n\n::: {.cell-output-display}\n![](Lecture4_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## [Simulate many time series from the trend stationarity model]{.r-fit-text} {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2,2))\nfor(i in 1:4){\n  fit <- lm(all_series[,i]~time(all_series[,i]), na.action=NULL)\n  tsplot(all_series[,i], type = \"b\", col = c(\"black\", \"blue\", rep(\"black\", times = 5), \"magenta\", \"black\", \"black\"), pch = 16, cex = 3, ylim = c(-3,6))\n  abline(fit)\n\n}\n```\n\n::: {.cell-output-display}\n![](Lecture4_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## [Simulate many time series from the trend stationarity model]{.r-fit-text} {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntsplot(all_series, spaghetti = TRUE, main = \"100 Simuated Trend Stationary Time Series\", type = \"b\")\nrect(xleft = 1.5, xright = 2.5, ybottom = -2, ytop = 4, border = \"blue\", lwd = 2)\nrect(xleft = 7.5, xright = 8.5, ybottom = -.5, ytop = 5, border = \"magenta\", lwd = 2)\n```\n\n::: {.cell-output-display}\n![](Lecture4_files/figure-html/trend-stationarity-simulate-1.png){width=672}\n:::\n:::\n\n\n## [Marginal and Joint Distributions t=8 and s=2]{.r-fit-text} {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ni = 2\nx_comp <- all_series[i,]\nx_8 <- all_series[8,]\n\npar(mfrow = c(2,2))\nhist(x_comp, col = \"blue\", main = paste(\"Histogram of simulations at t=\", i), xlab = paste(\"x_\",i))\nhist(x_8, col = \"magenta\", main = paste(\"Histogram of simulations at t=8\"), xlab = \"x_8\")\nplot(x_comp, x_8, col = \"purple\", pch = 16, main = \"Joint Distribution\")\nabline(lm(x_8~x_comp))\n```\n\n::: {.cell-output-display}\n![](Lecture4_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Marginal and Joint Distributions\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(ggplot2)\nlibrary(ggExtra)\nx <- data.frame(x_comp, x_8)\n# Save the scatter plot in a variable\np <- ggplot(x, aes(x = x_comp, y = x_8)) +\n  geom_point(col = \"purple\") + xlim(-3,6) + ylim(-3,6)+ \n  geom_text(aes(x = 2, y = -1, label = paste(\"rho(\",i,\",8) = \\n cor(x_\",i,\", x_8) = \", round(cor(x_comp, x_8),3)), size = 6)) + coord_fixed() \n\n# Arguments for each marginal histogram\nggMarginal(p, type = \"density\", adjust = 2,\n           xparams = list(col = \"blue\", fill = \"blue\"),\n           yparams = list(col = \"magenta\", fill = \"magenta\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in geom_text(aes(x = 2, y = -1, label = paste(\"rho(\", i, \",8) = \\n cor(x_\", : All aesthetics have length 1, but the data has 100 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\nAll aesthetics have length 1, but the data has 100 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Lecture4_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Do this for all possible combos of $s$ and $t$\n\n[View slides in full screen](Slides/SimulateAutocov/){target=\"_blank\"}\n\n## Visualizing the correlations\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncors <- apply(all_series, 1, function(x){cor(x, all_series[8,])})\nhist(cors, breaks = seq(-1, 1, by = .1), main = \"Correlation between simulations for x_8 and x_i\")\n```\n\n::: {.cell-output-display}\n![](Lecture4_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Are these all the correlations?\n\nNo, just pairwise with $x_8$. We could do all possible pairs:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(GGally)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nggpairs(data.frame(t(all_series)))\n```\n\n::: {.cell-output-display}\n![](Lecture4_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Distribution of all the correlations:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncoords <- t(combn(10,2))\ncors <- NULL\nfor(i in 1:nrow(coords)){\n  cors <- c(cors, cor(all_series[coords[i,1],], all_series[coords[i,2],]))\n}\ncors <- c(cors, rep(1, times = 10))\nhist(cors, breaks = seq(-1, 1, by = .1), main = \"Correlation between simulations for x_s and x_t\")\n```\n\n::: {.cell-output-display}\n![](Lecture4_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n# 3D plots\n\n## 3D version of histogram (includes $s-t$ plane)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncoords <- expand.grid(1:Time, 1:Time)\nnames(coords) <- c(\"s\", \"t\") \ncoords$cor <- NA\ncoords$pval <- NA\ncor_mat_theoretical <- cor_mat <- matrix(rep(NA, times = Time*Time), nrow = Time)\nfor(i in 1:nrow(coords)){\n  out <- cor.test((all_series[coords[i,1],]), (all_series[coords[i,2],]))\n  if(coords[i,1]==coords[i,2]){\n    coords$cor[i] <- 1\n    coords$pval[i] <- 0\n    cor_mat[coords[i,1], coords[i,2]] <- 1\n    cor_mat_theoretical[coords[i,1], coords[i,2]] <- 1\n  }else{\n    coords$cor[i] <- out$estimate\n    coords$pval[i] <- out$p.value\n    cor_mat[coords[i,1], coords[i,2]] <- out$estimate\n    cor_mat_theoretical[coords[i,1], coords[i,2]] <- 0\n    \n  }\n}\n\nlibrary(plotly)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'plotly'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:graphics':\n\n    layout\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nplot_ly(coords,\n        x= ~s, y=~t, z=~cor, \n        type = 'scatter3d', mode = \"markers\", size = .1)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-28f05eb496dba0251a8e\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-28f05eb496dba0251a8e\">{\"x\":{\"visdat\":{\"12464326017e7\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"12464326017e7\",\"attrs\":{\"12464326017e7\":{\"x\":{},\"y\":{},\"z\":{},\"mode\":\"markers\",\"size\":0.10000000000000001,\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter3d\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"xaxis\":{\"title\":\"s\"},\"yaxis\":{\"title\":\"t\"},\"zaxis\":{\"title\":\"cor\"}},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10],\"y\":[1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10],\"z\":[1,0.059135434472129919,-0.052880953135475917,-0.026905997187335041,0.036017003434894758,0.011140774549022642,0.035990888808339193,0.19959921974974704,-0.050366298868360727,-0.087877374332875971,0.059135434472129919,1,-0.013635852199689269,0.042517517692433032,-0.074283102148410635,0.086607829916864151,0.12068872640020716,0.21046094698567683,-0.15611264192466928,-0.14033899865188521,-0.052880953135475917,-0.013635852199689269,1,-0.017897392622869657,0.0077354664242062108,0.00019108851655491376,-0.13933779696857057,0.049537252674099697,-0.13568074366144287,0.16282741461842651,-0.026905997187335041,0.042517517692433032,-0.017897392622869657,1,0.035496665010936797,-0.1050136145734555,-0.011553056719649853,-0.11050944206283479,0.031457263540661792,0.12051256014611285,0.036017003434894758,-0.074283102148410635,0.0077354664242062108,0.035496665010936797,1,0.064296995556452755,0.10168398301390058,-0.030544352260207342,-0.058536110702862222,0.12925127574573572,0.011140774549022642,0.086607829916864151,0.00019108851655491376,-0.1050136145734555,0.064296995556452755,1,0.03604317982210696,-0.067319265108893619,-0.022105477116285525,0.047383795023455813,0.035990888808339193,0.12068872640020716,-0.13933779696857057,-0.011553056719649853,0.10168398301390058,0.03604317982210696,1,0.080454828353688071,0.074461253775125649,0.024902769242895369,0.19959921974974704,0.21046094698567683,0.049537252674099697,-0.11050944206283479,-0.030544352260207342,-0.067319265108893619,0.080454828353688071,1,-0.23462802881766509,-0.029004058566842572,-0.050366298868360727,-0.15611264192466928,-0.13568074366144287,0.031457263540661792,-0.058536110702862222,-0.022105477116285525,0.074461253775125649,-0.23462802881766509,1,0.07817135282147844,-0.087877374332875971,-0.14033899865188521,0.16282741461842651,0.12051256014611285,0.12925127574573572,0.047383795023455813,0.024902769242895369,-0.029004058566842572,0.07817135282147844,1],\"mode\":\"markers\",\"type\":\"scatter3d\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"size\":[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55],\"sizemode\":\"area\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"textfont\":{\"size\":55},\"error_y\":{\"color\":\"rgba(31,119,180,1)\",\"width\":55},\"error_x\":{\"color\":\"rgba(31,119,180,1)\",\"width\":55},\"line\":{\"color\":\"rgba(31,119,180,1)\",\"width\":55},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n## [Simulated auto correlation function $\\hat{\\gamma}_x(h)$ (with a blanket)]{.r-fit-text}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n## \"drape a blanket over it to see the pattern better\"\nfig <- plot_ly(z = ~cor_mat)\nfig %>% add_surface()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-22752a7619b4ff3dfe37\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-22752a7619b4ff3dfe37\">{\"x\":{\"visdat\":{\"12464239b294e\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"12464239b294e\",\"attrs\":{\"12464239b294e\":{\"z\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"surface\",\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"zaxis\":{\"title\":\"cor_mat\"}},\"hovermode\":\"closest\",\"showlegend\":false,\"legend\":{\"yanchor\":\"top\",\"y\":0.5}},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"colorbar\":{\"title\":\"cor_mat\",\"ticklen\":2,\"len\":0.5,\"lenmode\":\"fraction\",\"y\":1,\"yanchor\":\"top\"},\"colorscale\":[[\"0\",\"rgba(68,1,84,1)\"],[\"0.0416666666666667\",\"rgba(70,19,97,1)\"],[\"0.0833333333333333\",\"rgba(72,32,111,1)\"],[\"0.125\",\"rgba(71,45,122,1)\"],[\"0.166666666666667\",\"rgba(68,58,128,1)\"],[\"0.208333333333333\",\"rgba(64,70,135,1)\"],[\"0.25\",\"rgba(60,82,138,1)\"],[\"0.291666666666667\",\"rgba(56,93,140,1)\"],[\"0.333333333333333\",\"rgba(49,104,142,1)\"],[\"0.375\",\"rgba(46,114,142,1)\"],[\"0.416666666666667\",\"rgba(42,123,142,1)\"],[\"0.458333333333333\",\"rgba(38,133,141,1)\"],[\"0.5\",\"rgba(37,144,140,1)\"],[\"0.541666666666667\",\"rgba(33,154,138,1)\"],[\"0.583333333333333\",\"rgba(39,164,133,1)\"],[\"0.625\",\"rgba(47,174,127,1)\"],[\"0.666666666666667\",\"rgba(53,183,121,1)\"],[\"0.708333333333333\",\"rgba(79,191,110,1)\"],[\"0.75\",\"rgba(98,199,98,1)\"],[\"0.791666666666667\",\"rgba(119,207,85,1)\"],[\"0.833333333333333\",\"rgba(147,214,70,1)\"],[\"0.875\",\"rgba(172,220,52,1)\"],[\"0.916666666666667\",\"rgba(199,225,42,1)\"],[\"0.958333333333333\",\"rgba(226,228,40,1)\"],[\"1\",\"rgba(253,231,37,1)\"]],\"showscale\":true,\"z\":[[1,0.059135434472129919,-0.052880953135475917,-0.026905997187335041,0.036017003434894758,0.011140774549022642,0.035990888808339193,0.19959921974974704,-0.050366298868360727,-0.087877374332875971],[0.059135434472129919,1,-0.013635852199689269,0.042517517692433032,-0.074283102148410635,0.086607829916864151,0.12068872640020716,0.21046094698567683,-0.15611264192466928,-0.14033899865188521],[-0.052880953135475917,-0.013635852199689269,1,-0.017897392622869657,0.0077354664242062108,0.00019108851655491376,-0.13933779696857057,0.049537252674099697,-0.13568074366144287,0.16282741461842651],[-0.026905997187335041,0.042517517692433032,-0.017897392622869657,1,0.035496665010936797,-0.1050136145734555,-0.011553056719649853,-0.11050944206283479,0.031457263540661792,0.12051256014611285],[0.036017003434894758,-0.074283102148410635,0.0077354664242062108,0.035496665010936797,1,0.064296995556452755,0.10168398301390058,-0.030544352260207342,-0.058536110702862222,0.12925127574573572],[0.011140774549022642,0.086607829916864151,0.00019108851655491376,-0.1050136145734555,0.064296995556452755,1,0.03604317982210696,-0.067319265108893619,-0.022105477116285525,0.047383795023455813],[0.035990888808339193,0.12068872640020716,-0.13933779696857057,-0.011553056719649853,0.10168398301390058,0.03604317982210696,1,0.080454828353688071,0.074461253775125649,0.024902769242895369],[0.19959921974974704,0.21046094698567683,0.049537252674099697,-0.11050944206283479,-0.030544352260207342,-0.067319265108893619,0.080454828353688071,1,-0.23462802881766509,-0.029004058566842572],[-0.050366298868360727,-0.15611264192466928,-0.13568074366144287,0.031457263540661792,-0.058536110702862222,-0.022105477116285525,0.074461253775125649,-0.23462802881766509,1,0.07817135282147844],[-0.087877374332875971,-0.14033899865188521,0.16282741461842651,0.12051256014611285,0.12925127574573572,0.047383795023455813,0.024902769242895369,-0.029004058566842572,0.07817135282147844,1]],\"type\":\"surface\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n## [Theoretical $\\hat{\\gamma}_x(h)$ (using the derived formula (with a blanket)]{.r-fit-text}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Theoretical function\nfig <- plot_ly(z = ~cor_mat_theoretical)\nfig %>% add_surface()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-515b79f7d95db561aaa1\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-515b79f7d95db561aaa1\">{\"x\":{\"visdat\":{\"1246418508b66\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1246418508b66\",\"attrs\":{\"1246418508b66\":{\"z\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"surface\",\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"zaxis\":{\"title\":\"cor_mat_theoretical\"}},\"hovermode\":\"closest\",\"showlegend\":false,\"legend\":{\"yanchor\":\"top\",\"y\":0.5}},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"colorbar\":{\"title\":\"cor_mat_theoretical\",\"ticklen\":2,\"len\":0.5,\"lenmode\":\"fraction\",\"y\":1,\"yanchor\":\"top\"},\"colorscale\":[[\"0\",\"rgba(68,1,84,1)\"],[\"0.0416666666666667\",\"rgba(70,19,97,1)\"],[\"0.0833333333333333\",\"rgba(72,32,111,1)\"],[\"0.125\",\"rgba(71,45,122,1)\"],[\"0.166666666666667\",\"rgba(68,58,128,1)\"],[\"0.208333333333333\",\"rgba(64,70,135,1)\"],[\"0.25\",\"rgba(60,82,138,1)\"],[\"0.291666666666667\",\"rgba(56,93,140,1)\"],[\"0.333333333333333\",\"rgba(49,104,142,1)\"],[\"0.375\",\"rgba(46,114,142,1)\"],[\"0.416666666666667\",\"rgba(42,123,142,1)\"],[\"0.458333333333333\",\"rgba(38,133,141,1)\"],[\"0.5\",\"rgba(37,144,140,1)\"],[\"0.541666666666667\",\"rgba(33,154,138,1)\"],[\"0.583333333333333\",\"rgba(39,164,133,1)\"],[\"0.625\",\"rgba(47,174,127,1)\"],[\"0.666666666666667\",\"rgba(53,183,121,1)\"],[\"0.708333333333333\",\"rgba(79,191,110,1)\"],[\"0.75\",\"rgba(98,199,98,1)\"],[\"0.791666666666667\",\"rgba(119,207,85,1)\"],[\"0.833333333333333\",\"rgba(147,214,70,1)\"],[\"0.875\",\"rgba(172,220,52,1)\"],[\"0.916666666666667\",\"rgba(199,225,42,1)\"],[\"0.958333333333333\",\"rgba(226,228,40,1)\"],[\"1\",\"rgba(253,231,37,1)\"]],\"showscale\":true,\"z\":[[1,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,1]],\"type\":\"surface\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n# Detrending\n\n## Detrending\n\nIf a process is trend stationary (nonstationary in the mean, but stationary in the variance), can we just subtract off the trend and get back a stationary time series?\n\nYes, and that's called **detrending**\n\n## [Activity 3: Detrending a commodity (Example 3.7)]{.r-fit-text} {.smaller}\n\n-   Given the code to generate the plot with the trend line, how would you view the equation of the trend line?\n-   Visualize the de-trended series\n-   Compute the acf of the salmon series and the detrended series. What do you notice?\n\n## Next time\n\n-   Cross-correlation and regression with multiple time series ($x_t$ on x-axis instead of $t$ on x-axis like with the salmon)\n-   Activities and examples\n-   Smoothing\n",
    "supporting": [
      "Lecture4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}